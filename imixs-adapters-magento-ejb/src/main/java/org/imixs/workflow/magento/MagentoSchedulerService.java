/*******************************************************************************
 *  Imixs IX Workflow Technology
 *  Copyright (C) 2001, 2008 Imixs Software Solutions GmbH,  
 *  http://www.imixs.com
 *  
 *  This program is free software; you can redistribute it and/or 
 *  modify it under the terms of the GNU General Public License 
 *  as published by the Free Software Foundation; either version 2 
 *  of the License, or (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful, 
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of 
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 *  General Public License for more details.
 *  
 *  You can receive a copy of the GNU General Public
 *  License at http://www.gnu.org/licenses/gpl.html
 *  
 *  Contributors:  
 *  	Imixs Software Solutions GmbH - initial API and implementation
 *  	Ralph Soika
 *******************************************************************************/
package org.imixs.workflow.magento;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

import javax.annotation.Resource;
import javax.annotation.security.DeclareRoles;
import javax.annotation.security.RunAs;
import javax.ejb.EJB;
import javax.ejb.Local;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.Timeout;
import javax.ejb.Timer;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.imixs.workflow.ItemCollection;
import org.imixs.workflow.jee.ejb.EntityService;
import org.imixs.workflow.jee.ejb.ModelService;
import org.imixs.workflow.jee.ejb.WorkflowService;

/**
 * Magento - Scheduler
 * 
 * This is the implementation of a scheduler service. The EJB implementation can
 * be used as a Timer Service to process scheduled activities.
 * 
 * 
 * The TimerService can be started using the method start(). The Methods
 * findTimerDescription and findAllTimerDescriptions are used to lookup enabled
 * and running service instances.
 * 
 * Each Method expects or generates a TimerDescription Object. This object is an
 * instance of a ItemCollection. To create a new timer the ItemCollection should
 * contain the following attributes:
 * 
 * datstart - Date Object
 * 
 * datstop - Date Object
 * 
 * numInterval - Integer Object (interval in seconds)
 * 
 * id - String - unique identifier for the schedule Service.
 * 
 * $modelversion - String - identifies the model which schould be managed by the
 * service
 * 
 * the following additional attributes are generated by the finder methods and
 * can be used by an application to verfiy the status of a running instance:
 * 
 * nextTimeout - Next Timeout - pint of time when the service will be scheduled
 * 
 * timeRemaining - Timeout in milliseconds
 * 
 * statusmessage - text message
 * 

 * 
 * @author rsoika
 * 
 */
@DeclareRoles({ "org.imixs.ACCESSLEVEL.MANAGERACCESS" })
@Stateless
@RunAs("org.imixs.ACCESSLEVEL.MANAGERACCESS")
@Local
public class MagentoSchedulerService {

	@PersistenceContext(unitName = "org.imixs.workflow.jee.jpa")
	private EntityManager manager;

	private Date startDate, endDate;
	private long interval;
	private String id;
	private ItemCollection configuration = null;

	private static final String ENTITY_TYPE = "ConfigMagento";
	@Resource
	SessionContext ctx;

	@EJB
	WorkflowService workflowService;

	@EJB
	EntityService entityService;

	@EJB
	ModelService modelService;

	@Resource
	javax.ejb.TimerService timerService;

	private static Logger logger = Logger
			.getLogger(MagentoSchedulerService.class.getName());

	/**
	 * This method loads the configuration from an entity with type=ENTITY_TYPE
	 */
	public ItemCollection loadConfiguration() throws Exception {
		String sQuery = "";
		sQuery = "SELECT";

		sQuery += " wi FROM Entity as wi " + " WHERE wi.type='" + ENTITY_TYPE
				+ "'";
		Collection<ItemCollection> col = entityService.findAllEntities(sQuery,
				0, 1);

		if (col.size() > 0) {
			configuration = col.iterator().next();
		} else {
			try {
				// create an empty entity with type and with start and stop
				// default values
				configuration = new ItemCollection();
				Calendar cal = Calendar.getInstance();
				configuration.replaceItemValue("datStart", cal.getTime());
				configuration.replaceItemValue("datStop", cal.getTime());
				configuration.replaceItemValue("type", ENTITY_TYPE);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		updateTimerDetails();

		return configuration;
	}

	public ItemCollection saveConfiguration(ItemCollection aconfig)
			throws Exception {
		aconfig.replaceItemValue("type", ENTITY_TYPE);

		aconfig.removeItem("nextTimeout");
		aconfig.removeItem("timeRemaining");
		configuration = entityService.save(aconfig);
		return configuration;
	}

	/**
	 * This Method starts a new TimerService.
	 * 
	 * The method loads configuration from a ItemCollection (timerdescription)
	 * with the following informations:
	 * 
	 * datstart - Date Object
	 * 
	 * datstop - Date Object
	 * 
	 * numInterval - Integer Object (interval in seconds)
	 * 
	 * id - String - unique identifier for the schedule Service.
	 * 
	 * The param 'id' should contain a unique identifier (e.g. the EJB Name) as
	 * only one scheduled Workflow should run inside a WorkflowInstance. If a
	 * timer with the id is already running the method stops this timer object
	 * first and reschedules the timer.
	 * 
	 * The method throws an exception if the timerdescription contains invalid
	 * attributes or values.
	 */
	public ItemCollection start() throws Exception {

		configuration = loadConfiguration();
		id = configuration.getItemValueString("$uniqueid");

		// startdatum und enddatum manuell festlegen
		Calendar cal = Calendar.getInstance();
		startDate = cal.getTime();
		cal.add(Calendar.YEAR, 10);
		endDate = cal.getTime();
		configuration.replaceItemValue("datstart", startDate);
		configuration.replaceItemValue("datstop", endDate);

		// compute intervall
		int hours = configuration.getItemValueInteger("hours");
		int minutes = configuration.getItemValueInteger("minutes");

		interval = (hours * 60 + minutes) * 60 * 1000;

		configuration.replaceItemValue("numInterval", new Long(interval));
		// try to cancel an existing timer for this workflowinstance
		Timer timer = this.findTimer(id);
		if (timer != null)
			timer.cancel();

		// set statusmessage
		Calendar calNow = Calendar.getInstance();
		String msg = "Started: " + calNow.getTime() + " by "
				+ ctx.getCallerPrincipal().getName();
		configuration.replaceItemValue("statusmessage", msg);
		timer = timerService.createTimer(startDate, interval, configuration);
		System.out.println("[ImportSchedulerService] started: " + id);

		// load current timer details
		updateTimerDetails();

		configuration = saveConfiguration(configuration);
		return configuration;
	}

	/**
	 * Cancels a running timer instance. After cancel a timer the corresponding
	 * timerDescripton (ItemCollection) is no longer valid
	 * 
	 */
	public ItemCollection stop() throws Exception {
		configuration = loadConfiguration();
		id = configuration.getItemValueString("$uniqueid");

		boolean found = false;
		while (this.findTimer(id) != null) {
			this.findTimer(id).cancel();
			found = true;
		}
		if (found) {

			Calendar calNow = Calendar.getInstance();
			SimpleDateFormat dateFormatDE = new SimpleDateFormat(
					"dd.MM.yy hh:mm:ss");

			String msg = "stopped at " + dateFormatDE.format(calNow.getTime())
					+ " by " + ctx.getCallerPrincipal().getName();
			configuration.replaceItemValue("statusmessage", msg);

			logger.info("[WorkflowSchedulerService] "
					+ configuration.getItemValueString("txtName")
					+ " stopped: " + id);
		} else {
			configuration.replaceItemValue("statusmessage", "");
		}

		updateTimerDetails();
		configuration = saveConfiguration(configuration);

		return configuration;
	}

	/**
	 * This method returns a timer for a corresponding id if such a timer object
	 * exists.
	 * 
	 * @param id
	 * @return Timer
	 * @throws Exception
	 */
	private Timer findTimer(String id) throws Exception {
		for (Object obj : timerService.getTimers()) {
			Timer timer = (javax.ejb.Timer) obj;
			if (timer.getInfo() instanceof ItemCollection) {
				ItemCollection adescription = (ItemCollection) timer.getInfo();
				if (id.equals(adescription.getItemValueString("$uniqueid"))) {
					return timer;
				}
			}
		}
		return null;
	}

	private void updateTimerDetails() throws Exception {
		if (configuration == null)
			return;
		id = configuration.getItemValueString("$uniqueid");
		Timer timer = this.findTimer(id);
		if (timer != null) {
			// load current timer details
			configuration.replaceItemValue("nextTimeout",
					timer.getNextTimeout());
			configuration.replaceItemValue("timeRemaining",
					timer.getTimeRemaining());
		} else {
			configuration.replaceItemValue("nextTimeout", "");
			configuration.replaceItemValue("timeRemaining", "");

		}
	}

	/**
	 * This is the method which processes the timeout event depending on the
	 * running timer settings.
	 * 
	 * Die methode ruft die methoden importArtikel und importLiferant auf und
	 * liest die Daten aus den csv dateien aus.
	 * 
	 * @param timer
	 */
	@Timeout
	public void processImport(javax.ejb.Timer timer) {
		String sTimerID = null;

		// Startzeit ermitteln
		long lProfiler = System.currentTimeMillis();

		try {
			// configuration = (ItemCollection) timer.getInfo();
			configuration = loadConfiguration();
			sTimerID = configuration.getItemValueString("$uniqueid");
			System.out.println("[ImportSchedulerService]  Processing : "
					+ sTimerID);

		//	importArtikel();
			
			configuration.replaceItemValue("errormessage", "");
			configuration.replaceItemValue("datLastRun", new Date());

		} catch (Exception e) {
			e.printStackTrace();
			// stop timer!
			timer.cancel();
			System.out
					.println("[ImportSchedulerService] Timeout sevice stopped: "
							+ sTimerID);
			configuration.replaceItemValue("errormessage", e.toString());

		}

		// Save statistic in configuration
		try {
			configuration = this.saveConfiguration(configuration);
		} catch (Exception e2) {
			e2.printStackTrace();

		}

		System.out.println("[ImportSchedulerService]  finished successfull: "
				+ ((System.currentTimeMillis()) - lProfiler) + " ms");

		/*
		 * Check if Timer should be canceld now?
		 */
		if (endDate != null) {
			Calendar calNow = Calendar.getInstance();

			if (calNow.getTime().after(endDate)) {
				timer.cancel();
				System.out
						.println("[ImportSchedulerService] Timeout sevice stopped: "
								+ sTimerID);
			}
		}
	}

	/**
	 * Liefert die trefferliste nach einem Suchbegriff für Artikel zurück
	 * 
	 * Wenn der suchbegriff eine zahl ist, dann wird das ERgebnis nach der ID
	 * sortiert. Annderfalls alphabetisch nach dem namen.
	 * 
	 * @param searchPhrase
	 * @return
	 */
	public List<ItemCollection> searchArtikel(String searchPhrase) {

		List<ItemCollection> result = new ArrayList<ItemCollection>();

		

		return result;

	}
}
